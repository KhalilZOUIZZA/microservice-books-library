services:
  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./grafana/grafana-data:/var/lib/grafana
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - referential-back
      - library-back

  grafana:
    image: grafana/grafana
    hostname: grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "4000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

  chatbot-app:
    build:
      context: ${CHATBOT_PATH}
      dockerfile: Dockerfile
    container_name: chatbot-app
    ports:
      - "3000:3000"
    environment:
      - PORT=${CHATBOT_PORT}
      - API_KEY=${CHATBOT_API_KEY}
      - EUREKA_HOST=eureka-server
      - EUREKA_PORT=8761
    networks:
      - app-network
    depends_on:
      - eureka-server
    restart: always

  front-end:
    build: ../frontend
    container_name: frontend
    ports:
      - '${FRONT_END_PORT}:80'
    expose:
      - '${FRONT_END_PORT}'
    networks:
      - app-network
    restart: always

  auth-db:
    image: ${AUTH_DB_IMAGE_NAME}
    container_name: ${AUTH_DB_CONTAINER_NAME}
    volumes:
      - auth-data:/var/lib/mysql
    ports:
      - "${AUTH_DB_PORT}:3306"
    environment:
      - MYSQL_DATABASE=${AUTH_DB_NAME}
      - MYSQL_USER=${AUTH_DB_USER}
      - MYSQL_PASSWORD=${AUTH_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${AUTH_DB_PASSWORD_ROOT}
    networks:
      - app-network

  phpmyadmin-auth:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: ${AUTH_DB_CONTAINER_NAME}
      MYSQL_ROOT_PASSWORD: ''
    ports:
      - "810:80"
    depends_on:
      - auth-db
    networks:
      - app-network

  auth-back:
    build:
      context: ${AUTH_PROJECT_PATH}
      dockerfile: DockerfileWithPackage
    container_name: ${AUTH_CONTAINER_NAME}
    image: ${AUTH_IMAGE_NAME}
    ports:
      - "${AUTH_BACK_PORT}:${AUTH_BACK_PORT}"
    environment:
      - AUTH_DB_URL=${AUTH_DB_URL}
      - AUTH_DB_USER=${AUTH_DB_USER}
      - AUTH_DB_PASSWORD=${AUTH_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - auth-db
    networks:
      - app-network
    restart: always

  referential-db:
    image: ${REFERENTIAL_DB_IMAGE_NAME}
    container_name: ${REFERENTIAL_DB_CONTAINER_NAME}
    volumes:
      - referential-data:/var/lib/mysql
    ports:
      - "${REFERENTIAL_DB_PORT}:3306"
    environment:
      - MYSQL_DATABASE=${REFERENTIAL_DB_NAME}
      - MYSQL_USER=${REFERENTIAL_DB_USER}
      - MYSQL_PASSWORD=${REFERENTIAL_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${REFERENTIAL_DB_PASSWORD_ROOT}
    networks:
      - app-network
  phpmyadmin-referential:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: ${REFERENTIAL_DB_CONTAINER_NAME}
      MYSQL_ROOT_PASSWORD: ''
    ports:
      - "808:80"
    depends_on:
      - referential-db
    networks:
      - app-network
  referential-back:
    build:
      context: ${REFERENTIAL_PROJECT_PATH}
      dockerfile: DockerfileWithPackage
    container_name: ${REFERENTIAL_CONTAINER_NAME}
    image: ${REFERENTIAL_IMAGE_NAME}
    ports:
      - "${REFERENTIAL_BACK_PORT}:${REFERENTIAL_BACK_PORT}"
    environment:
      - REFERENTIAL_DB_URL=${REFERENTIAL_DB_URL}
      - REFERENTIAL_DB_USER=${REFERENTIAL_DB_USER}
      - REFERENTIAL_DB_PASSWORD=${REFERENTIAL_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - referential-db
    networks:
      - app-network
    restart: always
  library-db:
    image: ${LIBRARY_DB_IMAGE_NAME}
    container_name: ${LIBRARY_DB_CONTAINER_NAME}
    volumes:
      - library-data:/var/lib/mysqla
    ports:
      - "${LIBRARY_DB_PORT}:3306"
    environment:
      - MYSQL_DATABASE=${LIBRARY_DB_NAME}
      - MYSQL_USER=${LIBRARY_DB_USER}
      - MYSQL_PASSWORD=${LIBRARY_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${LIBRARY_DB_PASSWORD_ROOT}
    networks:
      - app-network
  phpmyadmin-library:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: ${LIBRARY_DB_CONTAINER_NAME}
      MYSQL_ROOT_PASSWORD: ''
    ports:
      - "809:80"
    depends_on:
      - library-db
    networks:
      - app-network
  library-back:
    build:
      context: ${LIBRARY_PROJECT_PATH}
      dockerfile: DockerfileWithPackage
    container_name: ${LIBRARY_CONTAINER_NAME}
    image: ${LIBRARY_IMAGE_NAME}
    ports:
      - "${LIBRARY_BACK_PORT}:${LIBRARY_BACK_PORT}"
    environment:
      - LIBRARY_DB_URL=${LIBRARY_DB_URL}
      - LIBRARY_DB_USER=${LIBRARY_DB_USER}
      - LIBRARY_DB_PASSWORD=${LIBRARY_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - library-db
    networks:
      - app-network
    restart: always
#  minio:
#    image: ${MINIO_IMAGE_NAME}
#    container_name: ${MINIO_CONTAINER_NAME}
#    restart: always
#    command: server /data --console-address ":9001"
#    environment:
#      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
#      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
#    volumes:
#      - ./data/minio_data:/data
#    ports:
#      - "${MINIO_HOME_PORT}:9000"
#      - "${MINIO_URL_PORT}:9001"
#    networks:
#      - app-network
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "minioadmin"
      MINIO_ROOT_PASSWORD: "minioadmin"
      MINIO_CORS_ALLOW_ORIGIN: http://localhost:4200
      MINIO_CORS_ALLOW_METHODS: GET, POST, PUT
      MINIO_CORS_ALLOW_HEADERS: Content-Type
    volumes:
      - ./data/minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

  # ---------------------
  # SonarQube
  # ---------------------
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9999:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - ./sonar-cnes-report-5.0.0.jar:/opt/sonarqube/extensions/plugins/sonar-cnes-report-5.0.0.jar
    networks:
      - app-network
    restart: unless-stopped

  sonarqube-db:
    image: postgres
    container_name: sonarqube-db
    environment:
      - POSTGRES_DB=sonarqube
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Eureka Service Registry
  eureka-server:
    build:
      context: ./../eureka-discovery
    ports:
      - "8761:8761"
    container_name: eureka-server
    networks:
      - app-network
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    restart: always

  gateway:
    build:
      context: ./../gateway
    ports:
      - "8090:8090"
    container_name: gateway
    networks:
      - app-network
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server
    restart: always


volumes:
  sonarqube_data:
  referential-data:
  library-data:
  auth-data:
  postgres_data:

networks:
  app-network:
    driver: bridge

